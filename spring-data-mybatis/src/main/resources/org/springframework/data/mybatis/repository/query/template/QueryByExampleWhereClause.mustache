<sql id="{{statementName}}">
    <where>
        {{#combinedColumns}}
            <if test="!__accessor.isIgnoredPath('{{propertyName}}')">
                <if test="{{#testNotNull}}__entity.{{propertyName}}{{/testNotNull}}">
                    <if test="__matcher.isAnyMatching()">OR</if>
                    <if test="__matcher.isAllMatching()">AND</if>
                    <choose>
                        <when test="__accessor.getStringMatcherForPath('{{propertyName}}').name() != 'REGEX'">
                            <choose>
                                <when test="__accessor.isIgnoreCaseForPath('{{propertyName}}')">
                                    {{lowercaseFunction}}({{#quote}}{{model.tableAlias}}{{/quote}}.{{name}})
                                </when>
                                <otherwise>{{#quote}}{{model.tableAlias}}{{/quote}}.{{name}}</otherwise>
                            </choose>
                        </when>
                    </choose>
                    {{^string}}
                    {{!not string}}
                        =
                        <choose>
                            <when test="__accessor.isIgnoreCaseForPath('{{propertyName}}')">
                                {{lowercaseFunction}}(#{ __entity.{{propertyName}}{{#javaType}},javaType={{javaTypeString}}{{/javaType}}{{#jdbcType}},jdbcType={{jdbcType.name}}{{/jdbcType}}{{#typeHandler}},typeHandler={{typeHandler.name}}{{/typeHandler}} })
                            </when>
                            <otherwise>#{ __entity.{{propertyName}}{{#javaType}},javaType={{javaTypeString}}{{/javaType}}{{#jdbcType}},jdbcType={{jdbcType.name}}{{/jdbcType}}{{#typeHandler}},typeHandler={{typeHandler.name}}{{/typeHandler}} }</otherwise>
                        </choose>
                    {{/string}}
                    {{#string}}
                    {{!string property}}
                        <bind name="__string_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}"
                              value="__accessor.getStringMatcherForPath('{{propertyName}}').name()"/>
                        <choose>
                            <when test="__string_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}.equals('DEFAULT') or __string_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}.equals('EXACT')">
                                =
                                <choose>
                                    <when test="__accessor.isIgnoreCaseForPath('{{propertyName}}')">
                                        {{lowercaseFunction}}(#{ __entity.{{propertyName}}{{#javaType}},javaType={{javaTypeString}}{{/javaType}}{{#jdbcType}},jdbcType={{jdbcType.name}}{{/jdbcType}}{{#typeHandler}},typeHandler={{typeHandler.name}}{{/typeHandler}} })
                                    </when>
                                    <otherwise>#{ __entity.{{propertyName}}{{#javaType}},javaType={{javaTypeString}}{{/javaType}}{{#jdbcType}},jdbcType={{jdbcType.name}}{{/jdbcType}}{{#typeHandler}},typeHandler={{typeHandler.name}}{{/typeHandler}} }</otherwise>
                                </choose>
                            </when>
                            <when test="__string_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}.equals('STARTING')">
                                LIKE
                                <bind name="__starting_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}"
                                      value="__entity.{{propertyName}} + '%'"/>
                                <choose>
                                    <when test="__accessor.isIgnoreCaseForPath('{{propertyName}}')">
                                        {{lowercaseFunction}}(#{ __starting_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}} })
                                    </when>
                                    <otherwise>#{ __starting_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}} }</otherwise>
                                </choose>
                            </when>
                            <when test="__string_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}.equals('ENDING')">
                                LIKE
                                <bind name="__ending_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}"
                                      value="'%' + __entity.{{propertyName}}"/>
                                <choose>
                                    <when test="__accessor.isIgnoreCaseForPath('{{propertyName}}')">
                                        {{lowercaseFunction}}(#{ __ending_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}} })
                                    </when>
                                    <otherwise>#{ __ending_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}} }</otherwise>
                                </choose>
                            </when>
                            <when test="__string_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}.equals('CONTAINING')">
                                LIKE
                                <bind name="__containing_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}"
                                      value="'%' + __entity.{{propertyName}} + '%'"/>
                                <choose>
                                    <when test="__accessor.isIgnoreCaseForPath('{{propertyName}}')">
                                        {{lowercaseFunction}}(#{ __containing_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}} })
                                    </when>
                                    <otherwise>#{ __containing_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}} }</otherwise>
                                </choose>
                            </when>
                            <when test="__string_{{#replaceDotToUnderline}}{{propertyName}}{{/replaceDotToUnderline}}.equals('REGEX')">
                                {{#regexLike}}
                                    {{value.name}};;;#{ __entity.{{propertyName}} }
                                {{/regexLike}}
                            </when>
                        </choose>
                    {{/string}}
                </if>
                <if test="({{^testNotNull}}__entity.{{propertyName}}{{/testNotNull}}) and __accessor.nullHandler.name().equals('INCLUDE')">
                    <if test="__matcher.isAnyMatching()">OR</if>
                    <if test="__matcher.isAllMatching()">AND</if>
                    {{#quote}}{{model.tableAlias}}{{/quote}}.{{name}} IS NULL
                </if>
            </if>
        {{/combinedColumns}}
    </where>
</sql>
